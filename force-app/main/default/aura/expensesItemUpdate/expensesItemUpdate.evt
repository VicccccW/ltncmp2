<!--
    There are two types of events, component and application. 
    Here we’re using a component event, 
    because we want an ancestor component to catch and handle the event
    An ancestor is a component “above” this one in the component hierarchy

    If we wanted a “general broadcast” kind of event, 
    where any component could receive it, we’d use an application event instead.
-->

<aura:event type="COMPONENT">
    <!--
        An event’s attributes describe the payload it can carry.
        In the clickReimbursed action handler, 
        we set the payload with a call to setParams(). 
        Here in the event definition, 
        we see how the event parameter is defined, 
        and that there are no other valid parameters.
    -->
    <aura:attribute name="expense" type="Expense__c"/>
</aura:event>

<!--
    And that’s pretty much all there is to defining events. 
    You don’t add implementation or behavior details to events themselves. 
    They’re just packages. 
    In fact, some events don’t have any parameters at all. 
    They’re just messages. “This happened!” 
    All of the behavior about what to do if “this” happens 
    is defined in the components that send and receive the event.
-->